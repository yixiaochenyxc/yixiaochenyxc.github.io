<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Github优秀开源项目Mark]]></title>
    <url>%2F2019%2F01%2F08%2FGithub%E4%BC%98%E7%A7%80%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AEMark%2F</url>
    <content type="text"><![CDATA[书籍 多国语言版：https://github.com/EbookFoundation/free-programming-books 中文版：https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books-zh.md awesome 汇总 url:https://github.com/sindresorhus/awesome 面试资源：https://github.com/francistao/LearningNotes cyc的github：https://github.com/CyC2018/CS-Notes java+面试：https://github.com/Snailclimb/JavaGuide shellhttps://github.com/robbyrussell/oh-my-zsh]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Mark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[cmd中javac问题（转载）]]></title>
    <url>%2F2019%2F01%2F07%2Fcmd%E4%B8%ADjavac%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[解决cmd中javac不是内部或外部命令，也不是可运行的程序或批处理文件 下载JDK，安装。 配置JDK。 （右键我的电脑 – 属性 – 高级系统设置 – 环境变量。） 添加系统变量JAVA_HOME- 变量名：JAVA_HOME - 变量值：C:\Program Files\Java\jdk1.8.0_121 添加系统变量CLASSPATH- 变量名：CLASSPATH 变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar; 修改系统变量path（新增）- %JAVA_HOME%\jre\bin %JAVA_HOME%\bin 配置完成后，在CMD中验证是否安装成功。 java （正常） java -version (正常) javac (不是内部或外部命令，也不是可运行的程序或批处理文件) 查了一下， 原因是：配置Path变量，WIN10和其他系统不同，WIN10的path变量，要用jdk的绝对路径，而不能用%JAVA_HOME%这一类的，计算机识别不了。 修改2.3步骤，修改为： C:\Program Files\Java\jdk1.8.0_121\jre\bin C:\Program Files\Java\jdk1.8.0_121\bin再次通过CMD验证，java \ javac \ java -version ， 三条命令均正常。到此，WIN10系统下安装JDK（1.8）成功。 参考网站：https://www.cnblogs.com/wangjianuo/p/9159819.html]]></content>
      <categories>
        <category>磕磕碰碰</category>
      </categories>
      <tags>
        <tag>小问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令小结]]></title>
    <url>%2F2019%2F01%2F06%2FGit%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[一.基础命令 初始化一个Git仓库，使用 git init 命令 添加文件到Git仓库 使用命令 git add ，可反复多次使用，添加多个文件 使用git commit -m 完成 例:git add readme.txt, git commit -m “wrote a readme file” 版本回退 查看提交历史： get log 可以查看到历史的commit_id 版本回退 git reset –hard commit_id head 指向的版本就是当前版本 head^指的是上个版本 head^^ 上上个版本 head~100 上100个版本 要返回未来，查看commit_id get reflog 查看状态 git status 丢弃工作区的修改(未提交到暂存区) git checkout — file 丢弃工作区的修改(已提交到暂存区) git reset HEAD git checkout — file 删除一个文件 rm file git rm file git commit -m “remove message 二.远程仓库常用命令 关联一个远程库 git remote add origin git@server-name:path/repo-name.git 第一次推送master分支所有内容 git push -u origin master 以后推送使用命令 git push origin master 从远程仓库克隆 git clone git clone git://github.com/XXX/gitskills.git 三.分支管理常用命令 查看分支 git branch 注意：会在当前的分支前有个*符号 创建分支 git branch 切换分支 git checkout 创建+切换分支 git checkout -b 合并某分支到当前分支 git merge &lt;某分支&gt; 删除分支 git branch -d 查看分支合并图 git log — graph 隐藏当前工作现场 git stash 查看隐藏现场 git stash list 恢复现场 第一种 git stash apply 恢复现场 git stash drop 删除stash内容 第二种 git stash pop 恢复现场同时删除stash内容 丢弃一个没有合并的分支 git branch -D 注:开发一个新feature ，最好新建一个分支 查看远程库 git remote -v 本地推送分支到远程 git push origin branch-name 注：如果推送失败使用 git pull 抓取远程的新提交 本地创建和远程分支对应的分支 git checkout -b branch -name origin/branch-name 建立本地分支和远程分支的关联 git branch — set – upstream branch-name origin/branch-name 参考网站：https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
